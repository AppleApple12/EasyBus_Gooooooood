Index: app/src/main/java/com/example/easybus/Page11Activity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.easybus;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\nimport android.widget.Toast;\r\n\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.JsonArrayRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.Dash;\r\nimport com.google.android.gms.maps.model.Dot;\r\nimport com.google.android.gms.maps.model.Gap;\r\nimport com.google.android.gms.maps.model.JointType;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.PatternItem;\r\nimport com.google.android.gms.maps.model.Polyline;\r\nimport com.google.android.gms.maps.model.PolylineOptions;\r\nimport com.google.android.gms.maps.model.RoundCap;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n/**\r\n * An activity that displays a Google map with polylines to represent paths or routes,\r\n * and polygons to represent areas.\r\n */\r\npublic class Page11Activity extends AppCompatActivity\r\n        implements\r\n        OnMapReadyCallback,\r\n        GoogleMap.OnPolylineClickListener{\r\n        //GoogleMap.OnPolygonClickListener{\r\n    private GoogleMap mMap;\r\n    ArrayList<history> historyArrayList = new ArrayList<history>();\r\n    String getmail;\r\n    String dayStr,date,la,lo;\r\n    Double latitude,longitude;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_page11);\r\n\r\n        Intent intent = getIntent();\r\n        //從PAGE10傳過來的 年月日\r\n        dayStr = intent.getStringExtra(\"dayStr\");\r\n        System.out.println(\"dayStr : \"+dayStr);\r\n\r\n        // Get the SupportMapFragment and request notification when the map is ready to be used.\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\r\n                .findFragmentById(R.id.r_map);\r\n        mapFragment.getMapAsync(this);\r\n        fetch_history();\r\n        Get();\r\n        System.out.println(\"Get()\");\r\n\r\n        //跳頁回家長主頁\r\n        ImageButton back = (ImageButton)findViewById(R.id.back);\r\n        back.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent it1 = new Intent(Page11Activity.this,Page10Activity.class);\r\n                startActivity(it1);\r\n            }\r\n        });\r\n\r\n    }\r\n    public void fetch_history(){\r\n        String URL =Urls.url1+\"/LoginRegister/fetch_perhistory.php?email=\"+getmail;\r\n        JsonArrayRequest jsonArrayRequest = new JsonArrayRequest(Request.Method.GET, URL, null,\r\n                new Response.Listener<JSONArray>() {\r\n                    @Override\r\n                    public void onResponse(JSONArray array) {\r\n                        for(int i =0;i<array.length();i++){\r\n                            try{\r\n                                JSONObject object = array.getJSONObject(i);\r\n                                date = object.getString(\"date\").trim();\r\n                                la = object.getString(\"latitude\").trim();\r\n                                lo = object.getString(\"longitude\").trim();\r\n                                latitude=Double.parseDouble(la);\r\n                                longitude=Double.parseDouble(lo);\r\n\r\n                                history h =new history();\r\n                                h.setDate(date);\r\n                                h.setLatitude(latitude);\r\n                                h.setLongitude(longitude);\r\n                                historyArrayList.add(h);\r\n\r\n                                System.out.println(\"date :\"+date);\r\n                                System.out.println(\"latitude :\"+latitude);\r\n                                System.out.println(\"longitude :\"+longitude);\r\n                            } catch (JSONException e) {\r\n                                System.out.println(\"JSONException e :\"+e.toString());\r\n                            }\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(Page11Activity.this, error.toString(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n        RequestQueue requestQueue2 = Volley.newRequestQueue(Page11Activity.this);\r\n        requestQueue2.add(jsonArrayRequest);\r\n    }\r\n    public void Get(){\r\n        for(history mh :historyArrayList){\r\n            System.out.println(\"getDate :\"+mh.getDate());\r\n            System.out.println(\"getLatitude :\"+mh.getLatitude());\r\n            System.out.println(\"getLongitude :\"+mh.getLongitude());\r\n        }\r\n    }\r\n    /**\r\n     * Manipulates the map when it's available.\r\n     * The API invokes this callback when the map is ready to be used.\r\n     * This is where we can add markers or lines, add listeners or move the camera.\r\n     * In this tutorial, we add polylines and polygons to represent routes and areas on the map.\r\n     */\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n\r\n        // Add polylines to the map.\r\n        // Polylines are useful to show a route or some other connection between points.\r\n        Polyline polyline1 = googleMap.addPolyline(new PolylineOptions()\r\n                .clickable(true)\r\n                .add(\r\n                        // 把抓到的資料 丟到這邊\r\n                        new LatLng(-35.016, 143.321),//緯度 經度\r\n                        new LatLng(-34.747, 145.592),\r\n                        new LatLng(-34.364, 147.891),\r\n                        new LatLng(-33.501, 150.217),\r\n                        new LatLng(-32.306, 149.248),\r\n                        new LatLng(-32.491, 147.309)));\r\n        // Store a data object with the polyline, used here to indicate an arbitrary type.\r\n        polyline1.setTag(\"A\");\r\n        // Style the polyline.\r\n        stylePolyline(polyline1);\r\n\r\n        /*Polyline polyline2 = googleMap.addPolyline(new PolylineOptions()\r\n                .clickable(true)\r\n                .add(\r\n                        new LatLng(-29.501, 119.700),\r\n                        new LatLng(-27.456, 119.672),\r\n                        new LatLng(-25.971, 124.187),\r\n                        new LatLng(-28.081, 126.555),\r\n                        new LatLng(-28.848, 124.229),\r\n                        new LatLng(-28.215, 123.938)));\r\n        polyline2.setTag(\"B\");\r\n        stylePolyline(polyline2);*/\r\n\r\n        /*// Add polygons to indicate areas on the map.\r\n        Polygon polygon1 = googleMap.addPolygon(new PolygonOptions()\r\n                .clickable(true)\r\n                .add(\r\n                        new LatLng(-27.457, 153.040),\r\n                        new LatLng(-33.852, 151.211),\r\n                        new LatLng(-37.813, 144.962),\r\n                        new LatLng(-34.928, 138.599)));\r\n        // Store a data object with the polygon, used here to indicate an arbitrary type.\r\n        polygon1.setTag(\"alpha\");\r\n        // Style the polygon.\r\n        stylePolygon(polygon1);\r\n\r\n        Polygon polygon2 = googleMap.addPolygon(new PolygonOptions()\r\n                .clickable(true)\r\n                .add(\r\n                        new LatLng(-31.673, 128.892),\r\n                        new LatLng(-31.952, 115.857),\r\n                        new LatLng(-17.785, 122.258),\r\n                        new LatLng(-12.4258, 130.7932)));\r\n        polygon2.setTag(\"beta\");\r\n        stylePolygon(polygon2);*/\r\n\r\n        // Position the map's camera near Alice Springs in the center of Australia,\r\n        // and set the zoom factor so most of Australia shows on the screen.\r\n        googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(-23.684, 133.903), 4));\r\n\r\n        // Set listeners for click events.\r\n        googleMap.setOnPolylineClickListener(this);\r\n        //googleMap.setOnPolygonClickListener(this);\r\n    }\r\n\r\n    private static final int COLOR_BLACK_ARGB = 0xff000000;\r\n    private static final int POLYLINE_STROKE_WIDTH_PX = 12;\r\n    /**\r\n     * Styles the polyline, based on type.\r\n     * @param polyline2 The polyline object that needs styling.\r\n     */\r\n    private void stylePolyline(Polyline polyline2) {\r\n        // Use a round cap at the start of the line.\r\n        polyline2.setStartCap(new RoundCap());\r\n\r\n\r\n        polyline2.setEndCap(new RoundCap());\r\n        polyline2.setWidth(POLYLINE_STROKE_WIDTH_PX);\r\n        polyline2.setColor(COLOR_BLACK_ARGB);\r\n        polyline2.setJointType(JointType.ROUND);\r\n    }\r\n    private static final int PATTERN_GAP_LENGTH_PX = 20;\r\n    private static final PatternItem DOT = new Dot();\r\n    private static final PatternItem GAP = new Gap(PATTERN_GAP_LENGTH_PX);\r\n\r\n    // Create a stroke pattern of a gap followed by a dot.\r\n    private static final List<PatternItem> PATTERN_POLYLINE_DOTTED = Arrays.asList(GAP, DOT);\r\n    /**\r\n     * Listens for clicks on a polyline.\r\n     * @param polyline The polyline object that the user has clicked.\r\n     */\r\n\r\n    @Override\r\n    public void onPolylineClick(Polyline polyline) {\r\n        // Flip from solid stroke to dotted stroke pattern. 從實心筆劃翻轉為虛線筆劃圖案\r\n        if ((polyline.getPattern() == null) || (!polyline.getPattern().contains(DOT))) {\r\n            polyline.setPattern(PATTERN_POLYLINE_DOTTED);\r\n        } else {\r\n            // The default pattern is a solid stroke. 默認圖案是實心筆劃。\r\n            polyline.setPattern(null);\r\n        }\r\n\r\n        Toast.makeText(this, \"Route type \" + polyline.getTag().toString(),\r\n                Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    /**\r\n     * Listens for clicks on a polygon.\r\n     * @param polygon The polygon object that the user has clicked.\r\n     */\r\n\r\n   /* @Override\r\n    public void onPolygonClick(Polygon polygon) {\r\n        // Flip the values of the red, green, and blue components of the polygon's color.\r\n        int color = polygon.getStrokeColor() ^ 0x00ffffff;\r\n        polygon.setStrokeColor(color);\r\n        color = polygon.getFillColor() ^ 0x00ffffff;\r\n        polygon.setFillColor(color);\r\n\r\n        Toast.makeText(this, \"Area type \" + polygon.getTag().toString(), Toast.LENGTH_SHORT).show();\r\n\r\n    }*/\r\n    private static final int COLOR_WHITE_ARGB = 0xffffffff;\r\n    private static final int COLOR_GREEN_ARGB = 0xff388E3C;\r\n    private static final int COLOR_PURPLE_ARGB = 0xff81C784;\r\n    private static final int COLOR_ORANGE_ARGB = 0xffF57F17;\r\n    private static final int COLOR_BLUE_ARGB = 0xffF9A825;\r\n\r\n    private static final int POLYGON_STROKE_WIDTH_PX = 8;\r\n    private static final int PATTERN_DASH_LENGTH_PX = 20;\r\n    private static final PatternItem DASH = new Dash(PATTERN_DASH_LENGTH_PX);\r\n\r\n    // Create a stroke pattern of a gap followed by a dash.\r\n    private static final List<PatternItem> PATTERN_POLYGON_ALPHA = Arrays.asList(GAP, DASH);\r\n\r\n    // Create a stroke pattern of a dot followed by a gap, a dash, and another gap.\r\n    private static final List<PatternItem> PATTERN_POLYGON_BETA =\r\n            Arrays.asList(DOT, GAP, DASH, GAP);\r\n\r\n    /**\r\n     * Styles the polygon, based on type.\r\n     * @param polygon2 The polygon object that needs styling.\r\n     */\r\n    /*private void stylePolygon(Polygon polygon2) {\r\n        String type = \"\";\r\n        // Get the data object stored with the polygon.\r\n        if (polygon2.getTag() != null) {\r\n            type = polygon2.getTag().toString();\r\n        }\r\n\r\n        List<PatternItem> pattern = null;\r\n        int strokeColor = COLOR_BLACK_ARGB;\r\n        int fillColor = COLOR_WHITE_ARGB;\r\n\r\n        switch (type) {\r\n            // If no type is given, allow the API to use the default.\r\n            case \"alpha\":\r\n                // Apply a stroke pattern to render a dashed line, and define colors.\r\n                pattern = PATTERN_POLYGON_ALPHA;\r\n                strokeColor = COLOR_GREEN_ARGB;\r\n                fillColor = COLOR_PURPLE_ARGB;\r\n                break;\r\n            case \"beta\":\r\n                // Apply a stroke pattern to render a line of dots and dashes, and define colors.\r\n                pattern = PATTERN_POLYGON_BETA;\r\n                strokeColor = COLOR_ORANGE_ARGB;\r\n                fillColor = COLOR_BLUE_ARGB;\r\n                break;\r\n        }\r\n\r\n        polygon2.setStrokePattern(pattern);\r\n        polygon2.setStrokeWidth(POLYGON_STROKE_WIDTH_PX);\r\n        polygon2.setStrokeColor(strokeColor);\r\n        polygon2.setFillColor(fillColor);\r\n    }*/\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/easybus/Page11Activity.java	(revision e8d2cf71edf175d95a6b5a5df71c6e5ce7ebb97b)
+++ app/src/main/java/com/example/easybus/Page11Activity.java	(date 1632837032184)
@@ -1,5 +1,6 @@
 package com.example.easybus;
 
+import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.app.AppCompatActivity;
 
 import android.content.Intent;
@@ -46,7 +47,7 @@
         //GoogleMap.OnPolygonClickListener{
     private GoogleMap mMap;
     ArrayList<history> historyArrayList = new ArrayList<history>();
-    String getmail;
+    String getmail= "appleapple6492@gmail.com";
     String dayStr,date,la,lo;
     Double latitude,longitude;
     @Override
@@ -66,7 +67,9 @@
         fetch_history();
         Get();
         System.out.println("Get()");
-
+        //隱藏title bar
+        ActionBar actionBar = getSupportActionBar();
+        actionBar.hide();
         //跳頁回家長主頁
         ImageButton back = (ImageButton)findViewById(R.id.back);
         back.setOnClickListener(new View.OnClickListener() {
